{
  "name": "etherid-js",
  "version": "2.0.0",
  "description": "EtherId.org API",
  "main": "src/etherid.js",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lexansoft/etherid-js.git"
  },
  "keywords": [
    "ethereum",
    "etherid"
  ],
  "author": {
    "name": "Alexandre Naverniouk"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/lexansoft/etherid-js/issues"
  },
  "homepage": "https://github.com/lexansoft/etherid-js#readme",
  "readme": "# etherid-js\nJavascript API for EtherID\n\n\n## Installation\n\n### In Node.js through npm\n\n```bash\n$ npm install etherid-js\n```\n\n\n### In the Browser through browserify\n\nSame as in Node.js, you just have to [browserify](https://github.com/substack/js-browserify) the code before serving it. \n\n### In the Browser through `<script>` tag\n\nMake the [etherid.min.js](/dist/etherid.min.js) available through your server and load it using a normal `<script>` tag, then you can require('etherid'). See the [Demo HTML](/tests/test.html)  \n\n\n##Usage\n\n### Initialization of the Web3\n\nThe [Web3](https://github.com/ethereum/web3.js) object is needed. This is the proper way to init it, so it will work in the Mist browser.\n\n```javascript\nif(typeof web3 === 'undefined')\n{\n    Web3 = require('web3');\n    web3 = new Web3();            \n}\n\nif( web3.currentProvider == null )\n    web3.setProvider( new web3.providers.HttpProvider( ) );    \n```\n\n### Initialization of the EtherID object \n```javascript\nvar etherid = require('etherid')\n```\n\n\n### Getting total number of registered domains\n\n```javascript\nEID.getNumberOfDomains( web3, function( error, result ) {\n    document.getElementById( \"n_domains\" ).innerHTML = result\n})\n```\nReturns total number of registered domains\n\n### Reading the domain record\n\nTo read the domain record you call:\n\n```javascript\netherid.getDomain( web3, {DOMAIN_NAME} )\n```\n{DOMAIN_NAME} can be a BigNumber, string or hex ( \"0xNNNN..\" )\n\nThe call returns a struct:\n\n```javascript\n{\n    domain      // Domain name (as BigNumber)\n    owner       // Address of the domain owner\n    expires     // The Ethereum Blockchin block number of expiration\n    price       // Selling Price if any\n    transfer    // The address for the domain transer\n    next_domain // Next domain name in the linked list\n    root_id     // First ID if any\n    domainStr   // UTF domain name\n    domainHex   // HEX domain name    \n}\n```\nExample:\n\n```javascript\ndomain = EID.getDomain( web3, \"test\", function( error, domain ) {\n    if( !error ) {\n        document.getElementById( \"expires\" ).innerHTML = domain.expires\n        document.getElementById( \"owner\" ).innerHTML = web3.toHex( domain.owner )\n        document.getElementById( \"price\" ).innerHTML = domain.price\n        document.getElementById( \"transfer\" ).innerHTML = web3.toHex( domain.transfer )\n        document.getElementById( \"next\" ).innerHTML = web3.toHex( domain.next_domain )\n        document.getElementById( \"root_id\" ).innerHTML = web3.toHex( domain.root_id )\n    }\n});\n```\n\n### Reading the domain ID\n\n```javascript\netherid.getId( web3, {DOMAIN_NAME}, {ID} )\n```\n\nBoth {DOMAIN_NAME} and {ID} can be a BigNumber, string or hex ( \"0xNNNN..\" )\n\nThe call returns a struct:\n\n```javascript\n{\n    name        // ID Name\n    nameStr     // ID UTF name\n    nameHex     // ID HEX name\n    \n    value       // Value\n    valueInt    // Value as Number\n    valueHex    // Value as HEX\n    valueStr    // Value as UTF\n            \n    next_id     // Next ID in the linked list\n    prev_id     // Previous ID in the linked list\n}\n```\nExample:\n\n```javascript\nEID.getId( web3, \"test\", \"test_number\", function( error, id ) {\n    if( !error ) \n        document.getElementById( \"test_int\" ).innerHTML = id.valueInt\n});\n\nEID.getId( web3, \"test\", \"test_text\", function( error, id ) {\n    if( !error ) document.getElementById( \"test_text\" ).innerHTML = id.valueStr\n});\n\nEID.getId( web3, \"test\", \"test_ipfs\", function( error, id ) {\n    if( !error ) document.getElementById( \"test_ipfs\" ).innerHTML = id.valueHash\n});\n```\n\n### Event handler\nYou can setup a handler that will be called everytime someone changes a domain.\n\n```javascript\netherid.watch( web3, function( error, result ) {\n    document.getElementById( \"n_domains\" ).innerHTML = EID.getNumberOfDomains( web3 )\n}) \n```\n\n### Enumerating domains\nYou can list all the registered domains by using getDomainEnum and getNextDomain\n\n\n```javascript\nDomainEnumerator = etherid.getDomainEnum( web3 )\n\nd = EID.getNextDomain( web3, DomainEnumerator )\n\nwhile ( d ) {\n    document.getElementById( \"list_domains\" ).innerHTML = \"domain #:\" + DomainEnumerator.n + \" \" + d.domainStr\n    d = EID.getNextDomain( web3, DomainEnumerator )\n}\n```\nNOTE: The enumerator properly treats the domain with name 0x0 registered in the system. If you implement the loop yourself, do not forget that first 0x0 domain you get is the real domain, and the second is in fact the end of the list.\n\n### Enumerating ID's\nYou can list all the domain ID's by using getIdEnum and getNextId\n\n\n```javascript\nIdEnumerator = etherid.getIdEnum( web3, \"test\" )\n\nid = EID.getNextId( web3, IdEnumerator )\n\nwhile ( id ) {\n    document.getElementById( \"list_domains\" ).innerHTML = \"ID #:\" + Id.n + \" \" + id.nameStr\n    id = EID.getNextId( web3, IdEnumerator )\n}\n```\nNOTE: The enumerator properly treats the ID with name 0x0 registered in the system. If you implement the loop yourself, do not forget that first 0x0 ID you get might be the real ID, and the second is in fact the end of the list. You should check if the 0x0 ID has value.\n\n\n### Changing domain\nTo cahnge the domain record call:\n\n```javascript\nEID.changeDomain( web3, {ADDRESS_TO USE}, {DOMAIN}, {EXPIRATION}, {PRICE}, TRANSFER}, callback )\n```\n\n\nExample:\n\n```javascript\nfunction onProlong()\n{\n    document.getElementById( \"prolong_status\" ).innerHTML = \"Reading domain...\"\n    \n    \n    domain = EID.getDomain( web3, \"test\", function( error, domain ) {\n        if( !error ) {\n            document.getElementById( \"prolong_status\" ).innerHTML = \"Channging...\"\n            EID.changeDomain( web3, domain.owner, \"test\", 2000000, 0, 0, function( error, domain ) {\n                if( !error ) {\n                    document.getElementById( \"prolong_status\" ).innerHTML = \"Transaction completed\"\n                }\n                else\n                {\n                    document.getElementById( \"prolong_status\" ).innerHTML = error\n                }\n            });    \n        }\n        else { document.getElementById( \"prolong_status\" ).innerHTML = error }\n    });    \n}\n```\n\n### Changing ID\nTo cahnge the domain ID call:\n\n```javascript\nEID.changeId( web3, {ADDRESS_TO USE}, {DOMAIN}, {ID}, {VALUE} callback )\n```\n\n\nExample:\n\n```javascript\nfunction onChangeId()\n{\n    document.getElementById( \"change_id_status\" ).innerHTML = \"Reading domain...\"\n    \n    \n    domain = EID.getDomain( web3, \"test\", function( error, domain ) {\n        if( !error ) {\n            document.getElementById( \"change_id_status\" ).innerHTML = \"Channging...\"\n            EID.changeId( web3, domain.owner, \"test\", \"time\", new Date().getTime(), function( error, domain ) {\n                if( !error ) {\n                    document.getElementById( \"change_id_status\" ).innerHTML = \"Transaction completed\"\n                }\n                else\n                {\n                    document.getElementById( \"change_id_status\" ).innerHTML = error\n                }\n            });    \n        }\n        else { document.getElementById( \"change_id_status\" ).innerHTML = error }\n    });    \n}\n```\n\n## License\n\nApache 2.0\n\n\n##Author\n\nAlexandre Naverniouk\n@alexna\n",
  "readmeFilename": "README.md",
  "gitHead": "fc8fde834cfc7818c5bd4d60dd1651bb4fc70286",
  "_id": "etherid-js@2.0.0",
  "_shasum": "3dbe313d5b63bfdd9fe9f3ccdc83387d77ed7db4",
  "_from": "etherid-js@2.0.0"
}
